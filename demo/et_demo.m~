function [fh, fe] = et_demo()
%% Example of initialization and fitting of the LiFE model
% This demo function illustrates how to:
%  - A - Set up a LiFE structure, identified as 'fe' (fascicle evaluation) in
%  the code below using several different parameter in fiber tractography
%  (the minimum radius of curvature, Tournier et al., 2012). We refer these
%  connectomes as Single Parameter Connectome (SPC).
%  This model contains a prediction of the diffusion
%  measurements in each white-matter voxel given by the fascicles contained
%  in a tractogrpahy solution, the connectome. Each fascicles makes a
%  prediction about the direction of diffusion in the set of voxels where
%  it travels through. The prediction is generated given the fascicle
%  orientation and position isndie the voxel. Predictions from multiple
%  fascicles in in each voxels are combined to generate a global connectome
%  prediciton for the diffusion signal in large sets of white matter
%  voxels.
%  - B - Create a new connectome model using the fascicles from different
%  SPCs. The code selects fascicles having higher contribution for
%  predicting diffusion signal in each SPCs, and create a new candidate
%  connectome by combining those fascicles. We refer this new connectome as
%  Ensemble Tractography Connectome (ETC). The code creates new fe
%  structure for the ETC. 
%  - C - Compare different connectome models. This demo will show how to
%  compare different conenctome models, SPC and ETCs by using the diffusion
%  prediction error (the ratio of root mean squared error, rRMSE; Pestilli et al., 2014). 
%  We report the ETC predicts diffusion signal better than SPCs. 
%
%  - Note - The example connectomes used for this demo comprise a portion
%  of the left occiptial lobe of an individual human brain. LiFE utilizes
%  large-scale methods to solve the foward model. The software allows for
%  solving connectomes spanning the entire white-matter of idnvidual
%  brains. The size of the connectome on the test data set is small enought
%  to allow for testing the code within a few minutes requiring only about
%  10GB of computer RAM and standard hardaware. This code has been tested
%  with: 
%
%   - Ubuntu 12.04.4 LTS (Precise) 
%   - 2.6Ghz i7 Processor and 24GB of RAM.
%   - MatLab Version: 8.0.0.783 (R2012b)
%
% Copyright (2015), Hiromasa Takemura, Stanford University.

% Intialize a local matlab cluster if the parallel toolbox is available.
% This helps speeding up computations espacially for large conenctomes.
feOpenLocalCluster;

%% Build the file names for the diffusion data, the anatomical MRI.
dwiFile       = fullfile(EtDemoDataPath('diffusion'),'run01_aligned_trilin.nii.gz');
dwiFileRepeat = fullfile(EtDemoDataPath('diffusion'),'run02_aligned_trilin.nii.gz');
t1File        = fullfile(EtDemoDataPath('anatomy'),  't1.nii.gz');

%% Set the folder to save fe files
feFolder = fullfile(EtDemoDataPath, 'fe');

%% (1) Evaluate the connectome using single curvature parameters.
% We will analyze first the CSD-based probabilistic tractography
% connectome using single parameter setting of the minimum radius of curvature.
spc.tractography = {'SPC_0p25','SPC_0p5','SPC_1','SPC_2'};

connectomename = {'et_demo_curv0p25_LH_occipital_SPC_160000.mat','et_demo_curv0p5_LH_occipital_SPC_160000.mat',...
    'et_demo_curv1_LH_occipital_SPC_160000.mat','et_demo_curv2_LH_occipital_SPC_160000.mat'};

% The final connectome and data astructure will be saved with this name:
feFileName    = {'et_demo_curv0p25_LH_occipital_SPC_160000_fe.mat','et_demo_curv0p5_LH_occipital_SPC_160000_fe.mat',...
    'et_demo_curv1_LH_occipital_SPC_160000_fe.mat','et_demo_curv2_LH_occipital_SPC_160000_fe.mat'};

for i = 1:length(connectomename)
% Set the file name of fg structure file (connectome) in demo data    
fgFileName{i}    = fullfile(EtDemoDataPath('tractography'), ...
               connectomename{i});
%% (1.1) Initialize the LiFE model structure, 'fe' in the code below. 
% This structure contains the forward model of diffusion based on the
% tractography solution. It also contains all the information necessary to
% compute model accuracry, and perform statistical tests. You can type
% help('feBuildModel') in the MatLab prompt for more information.
fe = feConnectomeInit(dwiFile,fgFileName{i},feFileName{i},[],dwiFileRepeat,t1File);    

%% (1.2) Fit the model. 
% Hereafter we fit the forward model of tracrography using a least-squared
% method. The information generated by fitting the model (fiber weights
% etc) is then installed in the LiFE structure.
fe = feSet(fe,'fit',feFitModel(feGet(fe,'mfiber'),feGet(fe,'dsigdemeaned'),'bbnnls'));

% Set the directory to save
fe = feSet(fe, 'savedir', feFolder);

% Save files
feConnectomeSave(fe);

%% (1.3) Extract the RMSE of the model on the fitted data set. 
% We now use the LiFE structure and the fit to compute the error in each
% white-matter voxel spanned by the tractography model.
spc.rmse{i}   = feGet(fe,'vox rmse');

%% (1.4) Extract the RMSE of the model on the second data set. 
% Here we show how to compute the cross-valdiated RMSE of the tractography
% model in each white-matter voxel. We store this information for later use
% and to save computer memory.
spc{i}.rmsexv = feGetRep(fe,'vox rmse');

%% (1.5) Extract the Rrmse. 
% We show how to extract the ratio between the model prediction error
% (RMSE) and the test-retest reliability of the data.
spc{i}.rrmse  = feGetRep(fe,'vox rmse ratio');

%% (1.6) Extract the fitted weights for the fascicles. 
% The following line shows how to extract the weight assigned to each
% fascicle in the connectome.
spc{i}.w      = feGet(fe,'fiber weights');

%% Extract the coordinates of the white-matter voxels
% We will use this later to compare probabilistic and deterministic models.
s{i}.coords = feGet(fe,'roi coords');
clear fe
end

%% (2) Evaluate the Ensemble Tractography connectome.
% We will now analyze the tensor-based Deterministic tractography
% connectome.
etc.tractography = 'Ensemble';

% Set the path to fe structure of SPCs.
for j = 1:length(feFileName)
feinput{j} = fullfile(feFolder, feFileName{j});
end

% Set the number to extract from each SPCs
numconcatenate = [40000 40000 40000 40000];

% Set the file name for ETC candidate
fgFile_ETC = fullfile(EtDemoDataPath('tractography'),'et_demo_LH_occipital_ETC_160000.mat');

% Generate a connectome from each SPCs with higher fascicle weights
et_createETcandidateconnectome(feinput, numconcatenate, fgFile_ETC);

% The final connectome and data astructure of the ETC will be saved with this name:
feFileName_ETC    = 'et_demo_LH_occipital_ETC_160000_fe.mat';

%% (2.1) Initialize the LiFE model structure, 'fe' in the code below. 
% This structure contains the forward model of diffusion based on the
% tractography solution. It also contains all the information necessary to
% compute model accuracry, and perform statistical tests. You can type
% help('feBuildModel') in the MatLab prompt for more information.
fe = feConnectomeInit(dwiFile,fgFile_ETC,feFileName_ETC,[],dwiFileRepeat,t1File);

%% (2.2) Fit the model. 
% Hereafter we fit the forward model of tracrography using a least-squared
% method. The information generated by fitting the model (fiber weights
% etc) is then installed in the LiFE structure.
fe = feSet(fe,'fit',feFitModel(feGet(fe,'mfiber'),feGet(fe,'dsigdemeaned'),'bbnnls'));

% Set the directory to save
fe = feSet(fe, 'savedir', feFolder);

% Save files
feConnectomeSave(fe);

%% (2.3) Extract the RMSE of the model on the fitted data set. 
% We now use the LiFE structure and the fit to compute the error in each
% white-matter voxel spanned by the tractography model.
etc.rmse   = feGet(fe,'vox rmse');

%% (2.4) Extract the RMSE of the model on the second data set. 
% Here we show how to compute the cross-valdiated RMSE of the tractography
% model in each white-matter voxel. We store this information for later use
% and to save computer memory.
etc.rmsexv = feGetRep(fe,'vox rmse');

%% (2.5) Extract the Rrmse. 
% We show how to extract the ratio between the model prediction error
% (RMSE) and the test-retest reliability of the data.
etc.rrmse  = feGetRep(fe,'vox rmse ratio');

%% (2.6) Extract the fitted weights for the fascicles. 
% The following line shows how to extract the weight assigned to each
% fascicle in the connectome.
etc.w      = feGet(fe,'fiber weights');

%% Extract the coordinates of the white-matter voxels.
% We will use this later to compare probabilistic and deterministic models.
e.coords = feGet( fe, 'roi coords');
clear fe

%% (3) Compare the quality of fit of SPCs and ETC.
% Hereafter, we compare the model accuracy of SPCs and ETC. 
% We specifically compare one SPC using a particular parameter
% (the minimum radius of curvature = 1 mm; default setting in mrTrix) and
% ETC.
%
%% (3.1) Find the common coordinates between the two connectomes.
%
% The two tractography method might have passed through slightly different
% white-matter voxels. Here we find the voxels where both models passed. We
% will compare the error only in these common voxels. There are more
% coordinates in the Prob connectome, because the tracking fills up more
% White-matter. 
%
% So, hereafter:
% - First we find the indices in the
% coordinate in the ETC connectome. But there are some of the
% coordinates in the SPC conectome that are NOT in the
% ETC.
%
% - Second we find the indices in the Deterministic connectome of the
% subset of coordinates in the Probabilistic connectome found in the
% previous step.
%
% - Third we find the common voxels. These allow us to find the rmse for
% the same voxels.
fprintf('Finding common brain coordinates between SPC 1mm and ETC connectomes...\n')
etc.coordsIdx = ismember(e.coords,s{3}.coords,'rows');
etc.coords    = e.coords(etc.coordsIdx,:);
spc{3}.coordsIdx  = ismember(s{3}.coords,etc.coords,'rows');
spc{3}.coords     = s{3}.coords(spc{3}.coordsIdx,:);
etc_rrmse_comparison      = etc.rrmse(etc.coordsIdx);
spc_rrmse_comparison       = spc{3}.rrmse(spc{3}.coordsIdx);
clear p d

%% (3.2) Make a scatter plot of the Ratio of RMSE of the two tractography models
fh(1) = scatterPlotRRMSE(spc_rrmse_comparison,etc_rrmse_comparison);

end


function fh = scatterPlotRRMSE(spc_rrmse_comparison,etc_rrmse_comparison)
figNameRmse = sprintf('ETC_vs_SPC1mm_Rrmse_common_voxels_map');
fh = mrvNewGraphWin(figNameRmse);
[ymap,x]  = hist3([spc_rrmse_comparison;etc_rrmse_comparison]',{[0.5:0.01:1], [0.5:0.01:1]});
ymap = ymap./length(etc_rrmse_comparison);
sh   = imagesc(flipud(log10(ymap)));
cm   = colormap(flipud(hot)); view(0,90);
axis('square')      
set(gca, ...
    'xlim',[1 length(x{1})],...
    'ylim',[1 length(x{1})], ...
    'ytick',[1 (length(x{1})/2) length(x{1})], ...
    'xtick',[1 (length(x{1})/2) length(x{1})], ...
    'yticklabel',[x{1}(end) x{1}(round(end/2)) x{1}(1)], ...
    'xticklabel',[x{1}(1)   x{1}(round(end/2)) x{1}(end)], ...
    'tickdir','out','ticklen',[.025 .05],'box','off', ...
    'fontsize',16,'visible','on')
hold on
plot3([1 length(x{1})],[length(x{1}) 1],[max(ymap(:)) max(ymap(:))],'k-','linewidth',1)
ylabel('Deterministic_{rmse}','fontsize',16)
xlabel('Probabilistic_{rmse}','fontsize',16)
cb = colorbar;
tck = get(cb,'ytick');
set(cb,'yTick',[min(tck)  mean(tck) max(tck)], ...
    'yTickLabel',round(1000*10.^[min(tck),...
    mean(tck), ...
    max(tck)])/1000, ...
    'tickdir','out','ticklen',[.025 .05],'box','on', ...
    'fontsize',16,'visible','on')
end
