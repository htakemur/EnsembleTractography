function et_concatenateconnectomes(fginput, numconcatenate, fname)

% Concatenate connectomes generated by different parameters and algorithms
% to create new candidate set of connectomes. 
% The concatenation by this code does not depend on how much each fascile
% (streamline) explains diffusion signals. In the concatenation, this code
% simply concatenate from individual fascicles from each original file by
% ascending order, because we assume that in many tractography, seed
% selection and fascicle generation is randomized per trial and we do not
% have to randomize it twice. 
% 
% For just including all fascicle in all connectomes, just specify the maximum
% number of fascicles in each connectome as numconcatenate. 
%
% Reference:
% Takemura, H., Caiafa, C., Wandell, B.A. & Pestilli, F. (in press) Ensemble
% Tractography. PLoS Computational Biol.
% 
% INPUT:
% fginput: Files of connectomes generated by various type of tractography
%          algorithms and parameters (.pdb or .mat format)
% numconcatenate: This variable defines how many fascicles from each
%                 connectome shold be included into ETC-rand candidate connectomes. 
%                 1 x N matrix.
% fname: File name for output file. 
%
% (C) Hiromasa Takemura, CiNet HHS/Stanford VISTA Lab
% 
%
% EXAMPLE:
% fginput = {'S1_LH_Occipital_curv0p25SPC_cand.mat',
% 'S1_LH_Occipital_curv0p5SPC_cand.mat',
% 'S1_LH_Occipital_curv1SPC_cand.mat',
% 'S1_LH_Occipital_curv2SPC_cand.mat'}
%  numconcatenate = [40000 40000 40000 40000];
% fname = 'S1_LH_Occipital_ETCrand_cand.mat';
% et_concatenateconnectomes(fginput, numconcatenate, fname) 

% Argument checking
if length(fginput) == length(numconcatenate)
else
 error('Matrix size of fginput and numnconcatenate should be identical.');
end

% Load fgfile to input;
for i = 1:length(fginput)
   fg{i} = fgRead(fginput{i});   
end

% Create fg structure
fg_etcrand = fgCreate;

% Set name for connectome file to save
fg_etcrand.name = fname;

% Concatenate connectomes
for i = 1:length(fginput)
    if i == 1
       fg_etcrand.fibers(1:numconcatenate(i)) = fg{1}.fibers(1:numconcatenate(1));       
    else
       fg_etcrand.fibers(1+sum(numconcatenate(1:(i-1))):sum(numconcatenate(1:i))) = fg{i}.fibers(1:numconcatenate(i));       
        
    end
end

% Write file
fgWrite(fg_etcrand.fibers);


