function [Curvhist_can Curvhist_opt] = s_comparecurvdistribution_spline(feFileToLoad, fname, bins, minimumnodenum)

% This script computes the curvature distribution of fascicle(streamline) in several
% connectome models.
% 
% The code has several steps:
% (1) Exclude outlier fascicles having length below user-defined threshold,
% and discontinuous fascicles generated by volume-based clipping
% (2) Fit spline curve for individual fascicle trajectory
% (3) Compute the radius of curvature in each step in individual fascicles
% (4) Compute the mean of radius of curvature across all nodes in
% individual fascicles
%
% The script is used for the analysis in following publlication:
% Takemura, H., Caiafa, C.F., Wandell, B. A & Pestilli, F. Ensemble Tractography.
%
% INPUT:
% feFileToLoad: A full path to .mat file containing fe structure generated by LiFE
% fname: The filename for saving the curvature distribution (.mat file)
% bins: Bins for the curvature distribution of histogram. The unit is the minimum radius of curvature (mm). 
% minimumnodenum: The threshold for excluding shorter fascicles. The unit
% is number of nodes (steps) in fascicles. The default is 5. 
% (For some connectome, I suggest to exclude extremely shorter fascicle
% because those fascicles may cause errors in spline curve fitting. If you
% generate the connectome with lenght threshold without volume-based
% clipping, this threshold setting is not necessary).
%
% OUTPUT:
% Curvhist_can: The curvature distribution histogram in candidate connectome
% Curvhist_opt: The curvature distribution histogram in optimized connectome
% 
% Hiromasa Takemura (c) CiNet HHS/Stanford VISTA team, 2015

if notDefined('bins'), bins = [0:0.25:40];end
if notDefined('minimumnodenum'), minimumnodenum = 5;end


for i = 1:length(feFileToLoad)    
    % Load fe structure
    load(feFileToLoad{i});
    
    % Load fg structure
    fg = feGet(fe,'fibers acpc');
    
    % Chose optimized connectome
    fweight = feGet(fe, 'fiber weights');
    fweight(fweight>0) = 1;
    fgopt = fgExtract(fg, logical(fweight),'keep');
    
    % Exclude fascicles having discontinuity due to volume-based clippling
    fg_can_nodisc = dtiFiberExcludeDiscontinuous(fg, 1);
    fg_opt_nodisc = dtiFiberExcludeDiscontinuous(fgopt, 1);
    
    % Exclude fascicles shorter than threshold
    for k = 1:length(fg_can_nodisc.fibers)
       fblength_can(k) = length(fg_can_nodisc.fibers{k}); 
    end
    for kk = 1:length(fg_opt_nodisc.fibers)
       fblength_opt(kk) = length(fg_opt_nodisc.fibers{kk}); 
    end
    
    % Exclude the fascicles shorter than user-defined threshold
    fbcan_length_index = zeros(length(fblength_can),1);
    fbopt_length_index = zeros(length(fblength_opt),1);
    
    fbcan_length_index(fblength_can>=minimumnodenum) = 1;
    fbopt_length_index(fblength_opt>=minimumnodenum)= 1;
    
    fg_can_nodisc_noshort = fgExtract(fg_can_nodisc, logical(fbcan_length_index),'keep');
    fg_opt_nodisc_noshort = fgExtract(fg_opt_nodisc, logical(fbopt_length_index),'keep');
    
    % Fit spline curve
    fgspline_can = dtiFiberSplinefit(fg_can_nodisc_noshort);
    fgspline_opt = dtiFiberSplinefit(fg_opt_nodisc_noshort);
        
    % Compute radius of curvature averaged along single fascicles
    [~, Curv_can] = dtiComputeFiberRadiusofCurvatureDistribution(fgspline_can,0);
    [~, Curv_opt] = dtiComputeFiberRadiusofCurvatureDistribution(fgspline_opt,0);
    
    
    % Remove inf and nan
    Curv_can = Curv_can(~isnan(Curv_can));
    Curv_can = Curv_can(~isinf(Curv_can));
    Curv_opt = Curv_opt(~isnan(Curv_opt));
    Curv_opt = Curv_opt(~isinf(Curv_opt));
    
    % Compute histogram for drawing disribution
    Curvhist_can(:,i) = hist(Curv_can, 0:0.25:40);
    Curvhist_opt(:,i) = hist(Curv_opt, 0:0.25:40);
    
    clear fg fe Curv_can Curv_opt 
end

% Save files
if notDefined('fname'),
else
save(fname, 'Curvhist_can','Curvhist_opt');
end

